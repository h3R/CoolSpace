#include "World.h"
#include "includes.h"
#include "Game.h"
#include <cassert>
#include <algorithm>
#include <map>

World::World(void){


}


World::~World(void){
}

void World::render(void){
	std::vector<Entity*> * toRender;
	int renders = children.size();

	// Renderizar los que no tienen nigun flag-----------------
	toRender = &children["none"];
	for (int i = 0; i< toRender->size(); i++){
		toRender->at(i)->render();
	}
	renders--;
	std::cout << renders;
	//---------------------------------------------------------
	

	//Al final de todo
assert(true);
}
void World::update(double elapsed_time){
	
	//std::vector<Entity*> * toUpdate;
	
	assert(children.size() > 1);
	for (std::map<std::string, std::vector<Entity *>>::const_iterator it = children.begin(); it != children.end(); ++it)
	{
		//toUpdate = (it->second);
		
		for (int j = 0; j < children[it->first].size(); j++){
			children[it->first].at(j)->update(elapsed_time);
		}
		//it-->first gives you the key (int)
		//it->second gives you the mapped element (vector)
	}

	/*for (int i = 0; i < children.size(); i++){
		toUpdate = children[i];
		for (int j = 0; j < children.size(); j++){
			toUpdate->at(j)->update(elapsed_time);
		}
	}
	*/
}

void World::addChild(Entity* ent){
	ent->status = true;
	ent->glSet = "none";
	
	children["none"].push_back(ent);

}

void World::addChild(Entity* ent, std::string glSets){
	ent->status = true;
	ent->glSet = glSets;
	children[glSets].push_back(ent);
}

void World::removeChild(Entity* ent){
	std::vector<Entity *> * aux = &children[ent->glSet];
	ent->status = false;
	for (int i = 0; i< aux->size(); i++){
		if(aux->at(i) == ent){
			aux->erase(aux->begin() + i);
		return; //by this point ent is parentless and is not inside any entity now world. his children are still inside him however.
		}
	}
}