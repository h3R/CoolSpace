#include "World.h"
#include "includes.h"
#include "Game.h"
#include <cassert>
#include <algorithm>


World::World(void){
	player = -1;
	selected = -1;
}


World::~World(void){
}

void World::render(void){
	/*

	for(int i = 0; i< children.size(); i++){
		children[i]->render();
	}
	*/
}
void World::update(double elapsed_time){
	/*
	for(int i = 0; i< children.size(); i++){
		children[i]->update(elapsed_time);
	}
	*/
}

void World::addChild(Entity* ent){
	ent->status = true;
	std::vector<GLenum> tGLenums;
	children[tGLenums]->push_back(ent);
}

void World::addChild(Entity* ent, std::vector<GLenum> glSets){
	ent->status = true;
	std::sort(glSets.begin, glSets.end);
	children[glSets]->push_back(ent);
}

void World::removeChild(Entity* ent){
	std::vector<Entity *> * aux = children[ent->glSet];
	ent->status = false;
	for (int i = 0; i< aux->size(); i++){
		if(aux->at(i) == ent){
			aux->erase(aux->begin() + i);
		return; //by this point ent is parentless and is not inside any entity now world. his children are still inside him however.
		}
	}
}

Matrix44 World::getFCam(){
	assert(selected >= 0);
	return children[selected]->model;
}